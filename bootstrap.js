(()=>{var e,t,r,n,o,a,i,s={},c={};function p(e){var t=c[e];if(void 0!==t)return t.exports;var r=c[e]={id:e,loaded:!1,exports:{}};return s[e](r,r.exports,p),r.loaded=!0,r.exports}p.m=s,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},n=e=>!--e.r&&e(),o=(e,t)=>e?e.push(t):n(t),p.a=(a,i,s)=>{var c,p,l,u=s&&[],d=a.exports,f=!0,b=!1,h=(t,r,n)=>{b||(b=!0,r.r+=t.length,t.map(((t,o)=>t[e](r,n))),b=!1)},m=new Promise(((e,t)=>{l=t,p=()=>(e(d),r(u),u=0)}));m[t]=d,m[e]=(e,t)=>{if(f)return n(e);c&&h(c,e,t),o(u,e),m.catch(t)},a.exports=m,i((a=>{if(!a)return p();var i,s;c=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var i=[];a.then((e=>{s[t]=e,r(i),i=0}));var s={};return s[e]=(e,t)=>(o(i,e),a.catch(t)),s}}var c={};return c[e]=e=>n(e),c[t]=a,c})))(a);var l=new Promise(((e,r)=>{(i=()=>e(s=c.map((e=>e[t])))).r=0,h(c,i,r)}));return i.r?l:s})).then(p,l),f=!1},p.d=(e,t)=>{for(var r in t)p.o(t,r)&&!p.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},p.f={},p.e=e=>Promise.all(Object.keys(p.f).reduce(((t,r)=>(p.f[r](e,t),t)),[])),p.u=e=>e+".bootstrap.js",p.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),p.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),p.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a={},i="fastgtfs-js-app:",p.l=(e,t,r,n)=>{if(a[e])a[e].push(t);else{var o,s;if(void 0!==r)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==i+r){o=u;break}}o||(s=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,p.nc&&o.setAttribute("nonce",p.nc),o.setAttribute("data-webpack",i+r),o.src=e),a[e]=[t];var d=(t,r)=>{o.onerror=o.onload=null,clearTimeout(f);var n=a[e];if(delete a[e],o.parentNode&&o.parentNode.removeChild(o),n&&n.forEach((e=>e(r))),t)return t(r)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=d.bind(null,o.onerror),o.onload=d.bind(null,o.onload),s&&document.head.appendChild(o)}},p.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;p.g.importScripts&&(e=p.g.location+"");var t=p.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),p.p=e})(),(()=>{var e={179:0};p.f.j=(t,r)=>{var n=p.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var o=new Promise(((r,o)=>n=e[t]=[r,o]));r.push(n[2]=o);var a=p.p+p.u(t),i=new Error;p.l(a,(r=>{if(p.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var o=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;i.message="Loading chunk "+t+" failed.\n("+o+": "+a+")",i.name="ChunkLoadError",i.type=o,i.request=a,n[1](i)}}),"chunk-"+t,t)}};var t=(t,r)=>{var n,o,[a,i,s]=r,c=0;for(n in i)p.o(i,n)&&(p.m[n]=i[n]);for(s&&s(p),t&&t(r);c<a.length;c++)o=a[c],p.o(e,o)&&e[o]&&e[o][0](),e[a[c]]=0},r=self.webpackChunkfastgtfs_js_app=self.webpackChunkfastgtfs_js_app||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),p.v=(e,t,r,n)=>{var o=fetch(p.p+""+r+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(o,n).then((t=>Object.assign(e,t.instance.exports))):o.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,n))).then((t=>Object.assign(e,t.instance.exports)))},Promise.all([p.e(436),p.e(492)]).then(p.bind(p,492)).catch((e=>console.error("Error importing `index.js`:",e)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFnQkMsS0FDL0QsSUFBSUMsRUFBTUMsTUFBTXRJLEVBQW9CK0csRUFBSSxHQUFLb0IsRUFBaUIsZ0JBQzlELE1BQWdELG1CQUFyQ0ksWUFBWUMscUJBQ2ZELFlBQVlDLHFCQUFxQkgsRUFBS0QsR0FDM0M3RixNQUFNa0csR0FBUzFGLE9BQU8yRixPQUFPdEksRUFBU3FJLEVBQUlFLFNBQVN2SSxXQUUvQ2lJLEVBQ0w5RixNQUFNcUcsR0FBT0EsRUFBRUMsZ0JBQ2Z0RyxNQUFNdUcsR0FBV1AsWUFBWVEsWUFBWUQsRUFBT1YsS0FDaEQ3RixNQUFNa0csR0FBUzFGLE9BQU8yRixPQUFPdEksRUFBU3FJLEVBQUlFLFNBQVN2SSxZQ050RCxxREFDR2lDLE9BQU1lLEdBQUs0RixRQUFRN0IsTUFBTSw4QkFBK0IvRCxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFzdGd0ZnMtanMtYXBwL3dlYnBhY2svcnVudGltZS9hc3luYyBtb2R1bGUiLCJ3ZWJwYWNrOi8vZmFzdGd0ZnMtanMtYXBwL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9mYXN0Z3Rmcy1qcy1hcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZmFzdGd0ZnMtanMtYXBwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mYXN0Z3Rmcy1qcy1hcHAvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly9mYXN0Z3Rmcy1qcy1hcHAvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Zhc3RndGZzLWpzLWFwcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Zhc3RndGZzLWpzLWFwcC93ZWJwYWNrL3J1bnRpbWUvaGFybW9ueSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2Zhc3RndGZzLWpzLWFwcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Zhc3RndGZzLWpzLWFwcC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Zhc3RndGZzLWpzLWFwcC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9mYXN0Z3Rmcy1qcy1hcHAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZmFzdGd0ZnMtanMtYXBwL3dlYnBhY2svcnVudGltZS93YXNtIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZmFzdGd0ZnMtanMtYXBwLy4vYm9vdHN0cmFwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB3ZWJwYWNrVGhlbiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgdGhlblwiKSA6IFwiX193ZWJwYWNrX3RoZW5fX1wiO1xudmFyIHdlYnBhY2tFeHBvcnRzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBleHBvcnRzXCIpIDogXCJfX3dlYnBhY2tfZXhwb3J0c19fXCI7XG52YXIgY29tcGxldGVRdWV1ZSA9IChxdWV1ZSkgPT4ge1xuXHRpZihxdWV1ZSkge1xuXHRcdHF1ZXVlLmZvckVhY2goKGZuKSA9PiAoZm4uci0tKSk7XG5cdFx0cXVldWUuZm9yRWFjaCgoZm4pID0+IChmbi5yLS0gPyBmbi5yKysgOiBmbigpKSk7XG5cdH1cbn1cbnZhciBjb21wbGV0ZUZ1bmN0aW9uID0gKGZuKSA9PiAoIS0tZm4uciAmJiBmbigpKTtcbnZhciBxdWV1ZUZ1bmN0aW9uID0gKHF1ZXVlLCBmbikgPT4gKHF1ZXVlID8gcXVldWUucHVzaChmbikgOiBjb21wbGV0ZUZ1bmN0aW9uKGZuKSk7XG52YXIgd3JhcERlcHMgPSAoZGVwcykgPT4gKGRlcHMubWFwKChkZXApID0+IHtcblx0aWYoZGVwICE9PSBudWxsICYmIHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpIHtcblx0XHRpZihkZXBbd2VicGFja1RoZW5dKSByZXR1cm4gZGVwO1xuXHRcdGlmKGRlcC50aGVuKSB7XG5cdFx0XHR2YXIgcXVldWUgPSBbXTtcblx0XHRcdGRlcC50aGVuKChyKSA9PiB7XG5cdFx0XHRcdG9ialt3ZWJwYWNrRXhwb3J0c10gPSByO1xuXHRcdFx0XHRjb21wbGV0ZVF1ZXVlKHF1ZXVlKTtcblx0XHRcdFx0cXVldWUgPSAwO1xuXHRcdFx0fSk7XG5cdFx0XHR2YXIgb2JqID0ge307XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9ialt3ZWJwYWNrVGhlbl0gPSAoZm4sIHJlamVjdCkgPT4gKHF1ZXVlRnVuY3Rpb24ocXVldWUsIGZuKSwgZGVwLmNhdGNoKHJlamVjdCkpO1xuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9XG5cdH1cblx0dmFyIHJldCA9IHt9O1xuXHRcdFx0XHRcdFx0cmV0W3dlYnBhY2tUaGVuXSA9IChmbikgPT4gKGNvbXBsZXRlRnVuY3Rpb24oZm4pKTtcblx0XHRcdFx0XHRcdHJldFt3ZWJwYWNrRXhwb3J0c10gPSBkZXA7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0O1xufSkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5hID0gKG1vZHVsZSwgYm9keSwgaGFzQXdhaXQpID0+IHtcblx0dmFyIHF1ZXVlID0gaGFzQXdhaXQgJiYgW107XG5cdHZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XG5cdHZhciBjdXJyZW50RGVwcztcblx0dmFyIG91dGVyUmVzb2x2ZTtcblx0dmFyIHJlamVjdDtcblx0dmFyIGlzRXZhbHVhdGluZyA9IHRydWU7XG5cdHZhciBuZXN0ZWQgPSBmYWxzZTtcblx0dmFyIHdoZW5BbGwgPSAoZGVwcywgb25SZXNvbHZlLCBvblJlamVjdCkgPT4ge1xuXHRcdGlmIChuZXN0ZWQpIHJldHVybjtcblx0XHRuZXN0ZWQgPSB0cnVlO1xuXHRcdG9uUmVzb2x2ZS5yICs9IGRlcHMubGVuZ3RoO1xuXHRcdGRlcHMubWFwKChkZXAsIGkpID0+IChkZXBbd2VicGFja1RoZW5dKG9uUmVzb2x2ZSwgb25SZWplY3QpKSk7XG5cdFx0bmVzdGVkID0gZmFsc2U7XG5cdH07XG5cdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlaikgPT4ge1xuXHRcdHJlamVjdCA9IHJlajtcblx0XHRvdXRlclJlc29sdmUgPSAoKSA9PiAocmVzb2x2ZShleHBvcnRzKSwgY29tcGxldGVRdWV1ZShxdWV1ZSksIHF1ZXVlID0gMCk7XG5cdH0pO1xuXHRwcm9taXNlW3dlYnBhY2tFeHBvcnRzXSA9IGV4cG9ydHM7XG5cdHByb21pc2Vbd2VicGFja1RoZW5dID0gKGZuLCByZWplY3RGbikgPT4ge1xuXHRcdGlmIChpc0V2YWx1YXRpbmcpIHsgcmV0dXJuIGNvbXBsZXRlRnVuY3Rpb24oZm4pOyB9XG5cdFx0aWYgKGN1cnJlbnREZXBzKSB3aGVuQWxsKGN1cnJlbnREZXBzLCBmbiwgcmVqZWN0Rm4pO1xuXHRcdHF1ZXVlRnVuY3Rpb24ocXVldWUsIGZuKTtcblx0XHRwcm9taXNlLmNhdGNoKHJlamVjdEZuKTtcblx0fTtcblx0bW9kdWxlLmV4cG9ydHMgPSBwcm9taXNlO1xuXHRib2R5KChkZXBzKSA9PiB7XG5cdFx0aWYoIWRlcHMpIHJldHVybiBvdXRlclJlc29sdmUoKTtcblx0XHRjdXJyZW50RGVwcyA9IHdyYXBEZXBzKGRlcHMpO1xuXHRcdHZhciBmbiwgcmVzdWx0O1xuXHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0Zm4gPSAoKSA9PiAocmVzb2x2ZShyZXN1bHQgPSBjdXJyZW50RGVwcy5tYXAoKGQpID0+IChkW3dlYnBhY2tFeHBvcnRzXSkpKSk7XG5cdFx0XHRmbi5yID0gMDtcblx0XHRcdHdoZW5BbGwoY3VycmVudERlcHMsIGZuLCByZWplY3QpO1xuXHRcdH0pO1xuXHRcdHJldHVybiBmbi5yID8gcHJvbWlzZSA6IHJlc3VsdDtcblx0fSkudGhlbihvdXRlclJlc29sdmUsIHJlamVjdCk7XG5cdGlzRXZhbHVhdGluZyA9IGZhbHNlO1xufTsiLCJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJmYXN0Z3Rmcy1qcy1hcHA6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmJvb3RzdHJhcC5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG1vZHVsZSk7XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgJ2V4cG9ydHMnLCB7XG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRzZXQ6ICgpID0+IHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRVMgTW9kdWxlcyBtYXkgbm90IGFzc2lnbiBtb2R1bGUuZXhwb3J0cyBvciBleHBvcnRzLiosIFVzZSBFU00gZXhwb3J0IHN5bnRheCwgaW5zdGVhZDogJyArIG1vZHVsZS5pZCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IChpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fSBlbHNlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHNbaV1dID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rZmFzdGd0ZnNfanNfYXBwXCJdID0gc2VsZltcIndlYnBhY2tDaHVua2Zhc3RndGZzX2pzX2FwcFwiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy52ID0gKGV4cG9ydHMsIHdhc21Nb2R1bGVJZCwgd2FzbU1vZHVsZUhhc2gsIGltcG9ydHNPYmopID0+IHtcblx0dmFyIHJlcSA9IGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyB3YXNtTW9kdWxlSGFzaCArIFwiLm1vZHVsZS53YXNtXCIpO1xuXHRpZiAodHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKHJlcSwgaW1wb3J0c09iailcblx0XHRcdC50aGVuKChyZXMpID0+IChPYmplY3QuYXNzaWduKGV4cG9ydHMsIHJlcy5pbnN0YW5jZS5leHBvcnRzKSkpO1xuXHR9XG5cdHJldHVybiByZXFcblx0XHQudGhlbigoeCkgPT4gKHguYXJyYXlCdWZmZXIoKSkpXG5cdFx0LnRoZW4oKGJ5dGVzKSA9PiAoV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYnl0ZXMsIGltcG9ydHNPYmopKSlcblx0XHQudGhlbigocmVzKSA9PiAoT2JqZWN0LmFzc2lnbihleHBvcnRzLCByZXMuaW5zdGFuY2UuZXhwb3J0cykpKTtcbn07IiwiLy8gQSBkZXBlbmRlbmN5IGdyYXBoIHRoYXQgY29udGFpbnMgYW55IHdhc20gbXVzdCBhbGwgYmUgaW1wb3J0ZWRcbi8vIGFzeW5jaHJvbm91c2x5LiBUaGlzIGBib290c3RyYXAuanNgIGZpbGUgZG9lcyB0aGUgc2luZ2xlIGFzeW5jIGltcG9ydCwgc29cbi8vIHRoYXQgbm8gb25lIGVsc2UgbmVlZHMgdG8gd29ycnkgYWJvdXQgaXQgYWdhaW4uXG5pbXBvcnQoXCIuL2luZGV4XCIpXG4gIC5jYXRjaChlID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbXBvcnRpbmcgYGluZGV4LmpzYDpcIiwgZSkpO1xuIl0sIm5hbWVzIjpbIndlYnBhY2tUaGVuIiwid2VicGFja0V4cG9ydHMiLCJjb21wbGV0ZVF1ZXVlIiwiY29tcGxldGVGdW5jdGlvbiIsInF1ZXVlRnVuY3Rpb24iLCJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIlN5bWJvbCIsInF1ZXVlIiwiZm9yRWFjaCIsImZuIiwiciIsInB1c2giLCJhIiwiYm9keSIsImhhc0F3YWl0IiwiY3VycmVudERlcHMiLCJvdXRlclJlc29sdmUiLCJyZWplY3QiLCJpc0V2YWx1YXRpbmciLCJuZXN0ZWQiLCJ3aGVuQWxsIiwiZGVwcyIsIm9uUmVzb2x2ZSIsIm9uUmVqZWN0IiwibGVuZ3RoIiwibWFwIiwiZGVwIiwiaSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlaiIsInJlamVjdEZuIiwiY2F0Y2giLCJyZXN1bHQiLCJ0aGVuIiwib2JqIiwicmV0Iiwid3JhcERlcHMiLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiZSIsImNodW5rSWQiLCJhbGwiLCJrZXlzIiwicmVkdWNlIiwicHJvbWlzZXMiLCJ1IiwiZyIsImdsb2JhbFRoaXMiLCJ0aGlzIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJobWQiLCJjcmVhdGUiLCJjaGlsZHJlbiIsInNldCIsIkVycm9yIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImwiLCJ1cmwiLCJkb25lIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInNjcmlwdHMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicyIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJkb25lRm5zIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsImJpbmQiLCJ0eXBlIiwidGFyZ2V0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJyZXBsYWNlIiwicCIsImluc3RhbGxlZENodW5rcyIsImoiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJlcnJvciIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJtZXNzYWdlIiwibmFtZSIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiZGF0YSIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsInYiLCJ3YXNtTW9kdWxlSWQiLCJ3YXNtTW9kdWxlSGFzaCIsImltcG9ydHNPYmoiLCJyZXEiLCJmZXRjaCIsIldlYkFzc2VtYmx5IiwiaW5zdGFudGlhdGVTdHJlYW1pbmciLCJyZXMiLCJhc3NpZ24iLCJpbnN0YW5jZSIsIngiLCJhcnJheUJ1ZmZlciIsImJ5dGVzIiwiaW5zdGFudGlhdGUiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==