"use strict";(self.webpackChunkfastgtfs_js_app=self.webpackChunkfastgtfs_js_app||[]).push([[492],{996:(n,e,t)=>{t.a(n,(async o=>{t.d(e,{Ox:()=>O,A9:()=>x,yR:()=>S,Bm:()=>T,n_:()=>z,Rz:()=>L,uq:()=>A,ug:()=>j,G6:()=>D,r1:()=>F,t$:()=>P,h9:()=>R,Dz:()=>C,kF:()=>E,h4:()=>W,Vw:()=>$,m_:()=>q,gx:()=>I,xW:()=>B,Mm:()=>N,mC:()=>U,GO:()=>J,gy:()=>K,ez:()=>X,s:()=>Y,OK:()=>G,WC:()=>Q,o$:()=>H,Wl:()=>V,qf:()=>Z,v0:()=>nn,xo:()=>en,Bh:()=>tn,W9:()=>on,ol:()=>rn,qw:()=>_n,UL:()=>cn,tw:()=>an,Id:()=>un,xX:()=>ln,Y4:()=>fn,Xb:()=>sn,g1:()=>gn,KA:()=>dn,tS:()=>bn,R$:()=>wn,md:()=>pn,IF:()=>hn,XP:()=>mn,zP:()=>yn,iQ:()=>kn,uQ:()=>vn,td:()=>On,Ct:()=>xn,Uj:()=>Sn,q2:()=>Tn,w1:()=>zn,FU:()=>Ln,Iu:()=>An,fY:()=>Mn,Or:()=>jn,oH:()=>Dn,_n:()=>Fn});var r=t(803);n=t.hmd(n);var i=o([r]);r=(i.then?await i:i)[0];const _=new Array(32).fill(void 0);function c(n){return _[n]}_.push(void 0,null,!0,!1);let a=_.length;function u(n){const e=c(n);return function(n){n<36||(_[n]=a,a=n)}(n),e}let l=0,f=null;function s(){return null!==f&&f.buffer===r.memory.buffer||(f=new Uint8Array(r.memory.buffer)),f}let g=new("undefined"==typeof TextEncoder?(0,n.require)("util").TextEncoder:TextEncoder)("utf-8");const d="function"==typeof g.encodeInto?function(n,e){return g.encodeInto(n,e)}:function(n,e){const t=g.encode(n);return e.set(t),{read:n.length,written:t.length}};function b(n,e,t){if(void 0===t){const t=g.encode(n),o=e(t.length);return s().subarray(o,o+t.length).set(t),l=t.length,o}let o=n.length,r=e(o);const i=s();let _=0;for(;_<o;_++){const e=n.charCodeAt(_);if(e>127)break;i[r+_]=e}if(_!==o){0!==_&&(n=n.slice(_)),r=t(r,o,o=_+3*n.length);const e=s().subarray(r+_,r+o);_+=d(n,e).written}return l=_,r}let w=null;function p(){return null!==w&&w.buffer===r.memory.buffer||(w=new Int32Array(r.memory.buffer)),w}let h=new("undefined"==typeof TextDecoder?(0,n.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});function m(n,e){return h.decode(s().subarray(n,n+e))}function y(n){a===_.length&&_.push(_.length+1);const e=a;return a=_[e],_[e]=n,e}function k(n){const e=typeof n;if("number"==e||"boolean"==e||null==n)return`${n}`;if("string"==e)return`"${n}"`;if("symbol"==e){const e=n.description;return null==e?"Symbol":`Symbol(${e})`}if("function"==e){const e=n.name;return"string"==typeof e&&e.length>0?`Function(${e})`:"Function"}if(Array.isArray(n)){const e=n.length;let t="[";e>0&&(t+=k(n[0]));for(let o=1;o<e;o++)t+=", "+k(n[o]);return t+="]",t}const t=/\[object ([^\]]+)\]/.exec(toString.call(n));let o;if(!(t.length>1))return toString.call(n);if(o=t[1],"Object"==o)try{return"Object("+JSON.stringify(n)+")"}catch(n){return"Object"}return n instanceof Error?`${n.name}: ${n.message}\n${n.stack}`:o}function v(n,e,t){r._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__he0f8518ff1e37dc2(n,e,y(t))}function O(n,e,t,o,i){var _=b(o,r.__wbindgen_malloc,r.__wbindgen_realloc),c=l;return u(r.get_near_trips(n,e,t,_,c,i))}function x(n){return r.init_trip_position_in_real_time(n)}function S(n,e){return u(r.get_trip_position(n,e))}function T(n){var e=b(n,r.__wbindgen_malloc,r.__wbindgen_realloc),t=l;return u(r.download_and_parse(e,t))}function z(n){return u(r.get_shape(n))}function L(n){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.get_trip_name(o,n);var e=p()[o/4+0],t=p()[o/4+1];return m(e,t)}finally{r.__wbindgen_add_to_stack_pointer(16),r.__wbindgen_free(e,t)}}function A(n,e,t,o){return u(r.get_solutions(n,e,t,o))}function M(n,e){try{return n.apply(this,e)}catch(n){r.__wbindgen_exn_store(y(n))}}function j(n){u(n)}function D(n){const e=u(n).original;return 1==e.cnt--&&(e.a=0,!0)}function F(n,e){const t=c(e);var o=b(JSON.stringify(void 0===t?null:t),r.__wbindgen_malloc,r.__wbindgen_realloc),i=l;p()[n/4+1]=i,p()[n/4+0]=o}function P(n,e){return y(JSON.parse(m(n,e)))}function R(){return y(new Error)}function C(n,e){var t=b(c(e).stack,r.__wbindgen_malloc,r.__wbindgen_realloc),o=l;p()[n/4+1]=o,p()[n/4+0]=t}function E(n,e){try{console.error(m(n,e))}finally{r.__wbindgen_free(n,e)}}function W(n,e){return y(m(n,e))}function $(n){return y(fetch(c(n)))}function q(n){return y(c(n))}function I(n,e){return y(c(n).fetch(c(e)))}function B(){return M((function(){return y(new Headers)}),arguments)}function N(){return M((function(n,e,t,o,r){c(n).append(m(e,t),m(o,r))}),arguments)}function U(n){return c(n)instanceof Response}function J(n,e){var t=b(c(e).url,r.__wbindgen_malloc,r.__wbindgen_realloc),o=l;p()[n/4+1]=o,p()[n/4+0]=t}function K(n){return c(n).status}function X(n){return y(c(n).headers)}function Y(){return M((function(n){return y(c(n).arrayBuffer())}),arguments)}function G(n){return c(n).now()}function Q(){return M((function(n,e,t){return y(new Request(m(n,e),c(t)))}),arguments)}function H(n){return"function"==typeof c(n)}function V(n){const e=c(n);return"object"==typeof e&&null!==e}function Z(n){return y(c(n).next)}function nn(){return M((function(n){return y(c(n).next())}),arguments)}function en(n){return c(n).done}function tn(n){return y(c(n).value)}function on(){return y(Symbol.iterator)}function rn(){return M((function(n,e){return y(Reflect.get(c(n),c(e)))}),arguments)}function _n(){return M((function(n,e){return y(c(n).call(c(e)))}),arguments)}function cn(n,e){return y(new Function(m(n,e)))}function an(){return M((function(n,e,t){return y(c(n).call(c(e),c(t)))}),arguments)}function un(){return Date.now()}function ln(){return y(new Object)}function fn(n,e){try{var t={a:n,b:e},o=new Promise(((n,e)=>{const o=t.a;t.a=0;try{return function(n,e,t,o){r.wasm_bindgen__convert__closures__invoke2_mut__h415d9670cb35aad2(n,e,y(t),y(o))}(o,t.b,n,e)}finally{t.a=o}}));return y(o)}finally{t.a=t.b=0}}function sn(n){return y(Promise.resolve(c(n)))}function gn(n,e){return y(c(n).then(c(e)))}function dn(n,e,t){return y(c(n).then(c(e),c(t)))}function bn(){return M((function(){return y(self.self)}),arguments)}function wn(){return M((function(){return y(window.window)}),arguments)}function pn(){return M((function(){return y(globalThis.globalThis)}),arguments)}function hn(){return M((function(){return y(t.g.global)}),arguments)}function mn(n){return void 0===c(n)}function yn(n){return y(c(n).buffer)}function kn(n,e,t){return y(new Uint8Array(c(n),e>>>0,t>>>0))}function vn(n){return c(n).length}function On(n){return y(new Uint8Array(c(n)))}function xn(n,e,t){c(n).set(c(e),t>>>0)}function Sn(){return M((function(n,e){return Reflect.has(c(n),c(e))}),arguments)}function Tn(){return M((function(n,e,t){return Reflect.set(c(n),c(e),c(t))}),arguments)}function zn(n,e){console.log(m(n,e))}function Ln(n,e){console.error(m(n,e))}function An(n,e){console.warn(m(n,e))}function Mn(n,e){var t=b(k(c(e)),r.__wbindgen_malloc,r.__wbindgen_realloc),o=l;p()[n/4+1]=o,p()[n/4+0]=t}function jn(n,e){throw new Error(m(n,e))}function Dn(){return y(r.memory)}function Fn(n,e,t){return y(function(n,e,t,o){const i={a:n,b:e,cnt:1,dtor:216},_=(...n)=>{i.cnt++;const e=i.a;i.a=0;try{return o(e,i.b,...n)}finally{0==--i.cnt?r.__wbindgen_export_2.get(i.dtor)(e,i.b):i.a=e}};return _.original=i,_}(n,e,0,v))}h.decode()}))},803:(n,e,t)=>{var o=([o])=>t.v(e,n.id,"3e8cada3b16862a2a502",{"./fastgtfs_js_bg.js":{__wbindgen_object_drop_ref:o.ug,__wbindgen_cb_drop:o.G6,__wbindgen_json_serialize:o.r1,__wbindgen_json_parse:o.t$,__wbg_new_59cb74e423758ede:o.h9,__wbg_stack_558ba5917b466edd:o.Dz,__wbg_error_4bb6c2a97407129a:o.kF,__wbindgen_string_new:o.h4,__wbg_fetch_d6391b3bc62838b4:o.Vw,__wbindgen_object_clone_ref:o.m_,__wbg_fetch_9dbf87b840590e85:o.gx,__wbg_new_80e79fe6852cbe9c:o.xW,__wbg_append_441dc2c4b2281095:o.Mm,__wbg_instanceof_Response_d61ff4c524b8dbc4:o.mC,__wbg_url_0ffe73d78f393423:o.GO,__wbg_status_1a7d875f6e1318cd:o.gy,__wbg_headers_f49eca784c8ebeba:o.ez,__wbg_arrayBuffer_b7c95af83e1e2705:o.s,__wbg_now_44a034aa2e1d73dd:o.OK,__wbg_newwithstrandinit_155cb1478824b198:o.WC,__wbindgen_is_function:o.o$,__wbindgen_is_object:o.Wl,__wbg_next_e38a92137a5693de:o.qf,__wbg_next_8b73f854755d8e5e:o.v0,__wbg_done_86efa5ac73f5b194:o.xo,__wbg_value_708ce1aa93862729:o.Bh,__wbg_iterator_30586bd3e46ee10e:o.W9,__wbg_get_800098c980b31ea2:o.ol,__wbg_call_ba36642bd901572b:o.qw,__wbg_newnoargs_9fdd8f3961dd1bee:o.UL,__wbg_call_3fc07b7d5fc9022d:o.tw,__wbg_now_0d452136c0f61bcc:o.Id,__wbg_new_edbe38a4e21329dd:o.xX,__wbg_new_c143a4f563f78c4e:o.Y4,__wbg_resolve_cae3d8f752f5db88:o.Xb,__wbg_then_c2361a9d5c9a4fcb:o.g1,__wbg_then_6c9a4bf55755f9b8:o.KA,__wbg_self_bb69a836a72ec6e9:o.tS,__wbg_window_3304fc4b414c9693:o.R$,__wbg_globalThis_e0d21cabc6630763:o.md,__wbg_global_8463719227271676:o.IF,__wbindgen_is_undefined:o.XP,__wbg_buffer_9e184d6f785de5ed:o.zP,__wbg_newwithbyteoffsetandlength_e57ad1f2ce812c03:o.iQ,__wbg_length_2d56cb37075fcfb1:o.uQ,__wbg_new_e8101319e4cf95fc:o.td,__wbg_set_e8ae7b27314e8b98:o.Ct,__wbg_has_9fa0c068863afd36:o.Uj,__wbg_set_73349fc4814e0fc6:o.q2,__wbg_log_e838fef9c2f5ccd5:o.w1,__wbg_error_712bad4931fcf046:o.FU,__wbg_warn_5be547e0f3fd7c82:o.Iu,__wbindgen_debug_string:o.fY,__wbindgen_throw:o.Or,__wbindgen_memory:o.oH,__wbindgen_closure_wrapper650:o._n}});t.a(n,(n=>{var e=n([t(996)]);return e.then?e.then(o):o(e)}),1)},492:(n,e,t)=>{t.a(n,(async n=>{t.r(e);var o=t(996),r=t(262),i=t(340),_=n([i,o]);[i,o]=_.then?await _:_;let c,a=[],u=null,l=null,f=null,s=null;function g(n){n.addListener("dragend",(function(){d()}))}function d(){!function(n,e,t){console.log("Navigating from ",n,"to",e),a.forEach((n=>n.setMap(null))),a=[];let i=o.uq(n.lat,n.lng,e.lat,e.lng);if(0===i.length)return void console.error("No solution found");let _=i[0];console.log("First solution:",_),_.components.forEach((n=>{"Walk"in n||"Bus"in n&&a.push((0,r.lz)(n.Bus.shape,t))}))}(l.getPosition().toJSON(),s.getPosition().toJSON(),c)}(window||t.g).initializeMap=async function(){c=new google.maps.Map(document.getElementById("map"),{center:{lat:45.440847,lng:12.315515},zoom:12}),c.addListener("click",(n=>{null===u?(null!=l&&l.setMap(null),null!=s&&s.setMap(null),console.log("First set!"),u=n.latLng.toJSON(),l=new google.maps.Marker({position:u,draggable:!0,map:c,animation:google.maps.Animation.DROP,title:"Start"}),g(l)):null===f&&(console.log("Second set!"),f=n.latLng.toJSON(),s=new google.maps.Marker({position:f,draggable:!0,map:c,animation:google.maps.Animation.DROP,title:"End"}),d(),g(s),u=null,f=null)})),await async function(){let n=window.location.href+"/gtfs_serialized.zip";await o.Bm(n)}(),(0,i.vd)(c),(0,i.sT)()}}))},262:(n,e,t)=>{function o(n,e,t=r()){const o=new google.maps.Polyline({path:n,geodesic:!0,strokeColor:t,strokeOpacity:.5,strokeWeight:7});return o.setMap(e),o}function r(){let n="#";for(let e=0;e<6;e++)n+="0123456789ABCDEF"[Math.floor(16*Math.random())];return n}function i(n,e,t,o){let r=(new Date).getTime(),i=r+o,_=n.lat(),c=n.lng(),a=e.lat()-n.lat(),u=e.lng()-n.lng();!function n(){let e=(new Date).getTime();if(e>i)return;let l=(e-r)/o,f=new google.maps.LatLng(_+a*l,c+u*l);t.setPosition(f),requestAnimationFrame((()=>{n()}))}()}t.d(e,{lz:()=>o,mr:()=>r,fK:()=>i})},340:(n,e,t)=>{t.a(n,(async n=>{t.d(e,{vd:()=>a,sT:()=>l});var o=t(996),r=t(262),i=t(436),_=n([o]);o=(_.then?await _:_)[0];let c=[];function a(n){console.log("Initializing network simulation:");let e=f(),t=(new Date).toISOString().slice(0,10).replaceAll("-","");console.log("Seconds:",e,"date:",t);let r=o.Ox(45.46394,12.22458,e,t,500);console.log(r),c=[],r.forEach((e=>{c.push(new s(e,n))})),console.log("Trip handlers initialized")}function u(){let n=f();c.forEach((e=>e.updateMarkerLocation(n)))}function l(){setTimeout((()=>{u(),l()}),1e3)}function f(){let n=new Date,e=new Date(n.getFullYear(),n.getMonth(),n.getDate(),0,0,0);return(n.getTime()-e.getTime())/1e3}class s{trip_id;pin;initialTime;polyline;lastLocation;constructor(n,e){this.trip_id=n,this.initialTime=Number(o.A9(n));let t=o.n_(n);this.lastLocation=new google.maps.LatLng(t[0].lat,t[0].lng);let _=(0,r.mr)();this.polyline=(0,r.lz)(t,e),this.pin=new google.maps.Marker({position:this.lastLocation,icon:{path:i.k0d.icon[4],fillColor:_,fillOpacity:1,labelOrigin:new google.maps.Point(i.k0d.icon[0]/2,i.k0d.icon[1]/2.5),anchor:new google.maps.Point(i.k0d.icon[0]/2,i.k0d.icon[1]),strokeWeight:1,strokeColor:"#ffffff",scale:.075},draggable:!0,label:{fontSize:"15px",color:_,fontWeight:"bold",text:o.Rz(n)},map:e,title:""})}updateMarkerLocation(n){let e=o.yR(this.trip_id,n),t=new google.maps.LatLng(e.lat,e.lng);(0,r.fK)(this.lastLocation,t,this.pin,1e3),this.lastLocation=t}}const g=window||t.g;g.updateTripsPosition=u,g.initNetworkSimulation=a}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,